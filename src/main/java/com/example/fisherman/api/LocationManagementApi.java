/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.fisherman.api;

import com.example.fisherman.DTO.LocationDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-20T08:34:41.907903300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Location Management", description = "the Location Management API")
public interface LocationManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /locations : Search fishing locations
     *
     * @param name Name of the fishing location to search for (optional)
     * @return Search results matching the query (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "locationsGet",
        summary = "Search fishing locations",
        tags = { "Location Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Search results matching the query"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations"
    )
    default ResponseEntity<List<LocationDTO>> _locationsGet(
        @Parameter(name = "name", description = "Name of the fishing location to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name

    ) {
        return locationsGet(name);
    }

    // Override this method
    default  ResponseEntity<List<LocationDTO>> locationsGet(String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /locations/{id} : Delete fishing location
     *
     * @param id ID of the fishing location to delete (required)
     * @return Location deleted (status code 204)
     *         or Location not found (status code 404)
     */
    @Operation(
        operationId = "locationsIdDelete",
        summary = "Delete fishing location",
        tags = { "Location Management" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Location deleted"),
            @ApiResponse(responseCode = "404", description = "Location not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/locations/{id}"
    )
    default ResponseEntity<Void> _locationsIdDelete(
        @Parameter(name = "id", description = "ID of the fishing location to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return locationsIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<Void> locationsIdDelete(String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /locations/{id} : Edit fishing location
     *
     * @param id ID of the fishing location to edit (required)
     * @param body Location object that needs to be updated (required)
     * @return Location updated (status code 200)
     *         or Invalid input (status code 400)
     *         or Location not found (status code 404)
     */
    @Operation(
        operationId = "locationsIdPut",
        summary = "Edit fishing location",
        tags = { "Location Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Location updated"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Location not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/locations/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _locationsIdPut(
        @Parameter(name = "id", description = "ID of the fishing location to edit", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Location object that needs to be updated", required = true) @Valid @RequestBody LocationDTO body
    ) {
        return locationsIdPut(id, body);
    }

    // Override this method
    default  ResponseEntity<Void> locationsIdPut(String id, LocationDTO body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /locations : Add new fishing location
     *
     * @param body Location object that needs to be added to the system (required)
     * @return Location created (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "locationsPost",
        summary = "Add new fishing location",
        tags = { "Location Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Location created"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/locations",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _locationsPost(
        @Parameter(name = "body", description = "Location object that needs to be added to the system", required = true) @Valid @RequestBody LocationDTO body
    ) {
        return locationsPost(body);
    }

    // Override this method
    default  ResponseEntity<Void> locationsPost(LocationDTO body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
