/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.fisherman.api;

import com.example.fisherman.DTO.FishermanDTO;
import com.example.fisherman.model.Fisherman;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-20T08:34:41.907903300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Fisherman Management", description = "the Fisherman Management API")
public interface FishermanManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /fishermen : Search fisherman profile
     *
     * @param name Name of the fisherman to search for (optional)
     * @return Search results matching the query (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "fishermenGet",
        summary = "Search fisherman profile",
        tags = { "Fisherman Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Search results matching the query"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishermen"
    )
    default ResponseEntity<List<FishermanDTO>> _fishermenGet(
        @Parameter(name = "name", description = "Name of the fisherman to search for", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name
    ) {
        return fishermenGet(name);
    }

    // Override this method
    default  ResponseEntity<List<FishermanDTO>> fishermenGet(String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /fishermen/{id} : Delete fisherman profile
     *
     * @param id ID of the fisherman to delete (required)
     * @return Fisherman deleted (status code 204)
     *         or Fisherman not found (status code 404)
     */
    @Operation(
        operationId = "fishermenIdDelete",
        summary = "Delete fisherman profile",
        tags = { "Fisherman Management" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Fisherman deleted"),
            @ApiResponse(responseCode = "404", description = "Fisherman not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/fishermen/{id}"
    )
    default ResponseEntity<Void> _fishermenIdDelete(
        @Parameter(name = "id", description = "ID of the fisherman to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return fishermenIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<Void> fishermenIdDelete(String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /fishermen/{id} : Edit fisherman profile
     *
     * @param id ID of the fisherman to edit (required)
     * @param body Fisherman object that needs to be updated (required)
     * @return Fisherman updated (status code 200)
     *         or Invalid input (status code 400)
     *         or Fisherman not found (status code 404)
     */
    @Operation(
        operationId = "fishermenIdPut",
        summary = "Edit fisherman profile",
        tags = { "Fisherman Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Fisherman updated"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Fisherman not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fishermen/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<FishermanDTO> _fishermenIdPut(
        @Parameter(name = "id", description = "ID of the fisherman to edit", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Fisherman object that needs to be updated", required = true) @Valid @RequestBody FishermanDTO body
    ) {
        return fishermenIdPut(id, body);
    }

    // Override this method
    default  ResponseEntity<FishermanDTO> fishermenIdPut(String id, FishermanDTO body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /fishermen : Add new fisherman profile
     *
     * @param body Fisherman object that needs to be added to the system (required)
     * @return Fisherman created (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "fishermenPost",
        summary = "Add new fisherman profile",
        tags = { "Fisherman Management" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Fisherman created"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fishermen",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _fishermenPost(
        @Parameter(name = "body", description = "Fisherman object that needs to be added to the system", required = true) @Valid @RequestBody FishermanDTO body
    ) {
        return fishermenPost(body);
    }

    // Override this method
    default  ResponseEntity<Void> fishermenPost(FishermanDTO body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
