/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.fisherman.api;

import com.example.fisherman.DTO.FishSpeciesDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-20T08:34:41.907903300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Fish Species", description = "the Fish Species API")
public interface FishSpeciesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /fishspecies : Retrieve a list of all fish species
     *
     * @return OK (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "fishspeciesGet",
        summary = "Retrieve a list of all fish species",
        tags = { "Fish Species" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishSpeciesDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishspecies",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FishSpeciesDTO>> _fishspeciesGet(
        
    ) {
        return fishspeciesGet();
    }

    // Override this method
    default  ResponseEntity<List<FishSpeciesDTO>> fishspeciesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protected\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /fishspecies/{id} : Delete a fish species by ID
     *
     * @param id  (required)
     * @return deleted item (status code 204)
     */
    @Operation(
        operationId = "fishspeciesIdDelete",
        summary = "Delete a fish species by ID",
        tags = { "Fish Species" },
        responses = {
            @ApiResponse(responseCode = "204", description = "deleted item", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishSpeciesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/fishspecies/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<FishSpeciesDTO> _fishspeciesIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return fishspeciesIdDelete(id);
    }

    // Override this method
    default  ResponseEntity<FishSpeciesDTO> fishspeciesIdDelete(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protected\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /fishspecies/{id} : Retrieve a fish species by ID
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "fishspeciesIdGet",
        summary = "Retrieve a fish species by ID",
        tags = { "Fish Species" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishSpeciesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/fishspecies/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<FishSpeciesDTO> _fishspeciesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return fishspeciesIdGet(id);
    }

    // Override this method
    default  ResponseEntity<FishSpeciesDTO> fishspeciesIdGet(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protected\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /fishspecies/{id} : Update a fish species by ID
     *
     * @param id  (required)
     * @param body Fish object that needs to be updated (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "fishspeciesIdPut",
        summary = "Update a fish species by ID",
        tags = { "Fish Species" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishSpeciesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/fishspecies/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FishSpeciesDTO> _fishspeciesIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "Fish object that needs to be updated", required = true) @Valid @RequestBody FishSpeciesDTO body
    ) {
        return fishspeciesIdPut(id, body);
    }

    // Override this method
    default  ResponseEntity<FishSpeciesDTO> fishspeciesIdPut(String id, FishSpeciesDTO body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protected\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /fishspecies : Add a new fish species
     *
     * @param fishspecies  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "fishspeciesPost",
        summary = "Add a new fish species",
        tags = { "Fish Species" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FishSpeciesDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/fishspecies",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FishSpeciesDTO> _fishspeciesPost(
        @Parameter(name = "fishspecies", description = "", required = true) @Valid @RequestBody FishSpeciesDTO fishspecies
    ) {
        return fishspeciesPost(fishspecies);
    }

    // Override this method
    default  ResponseEntity<FishSpeciesDTO> fishspeciesPost(FishSpeciesDTO fishspecies) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"protected\" : true, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
