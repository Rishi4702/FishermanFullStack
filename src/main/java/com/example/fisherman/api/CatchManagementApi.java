/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.fisherman.api;

import java.math.BigDecimal;
import com.example.fisherman.DTO.ModelCatchDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-20T08:34:41.907903300+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Catch Management", description = "the Catch Management API")
public interface CatchManagementApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /catches : Get all catches
     * Returns a list of all catches with location information.
     *
     * @return A list of catches with location information (status code 200)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "catchesGet",
        summary = "Get all catches",
        description = "Returns a list of all catches with location information.",
        tags = { "Catch Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of catches with location information", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ModelCatchDTO.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catches",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ModelCatchDTO>> _catchesGet(
        
    ) {
        return catchesGet();
    }

    // Override this method
    default  ResponseEntity<List<ModelCatchDTO>> catchesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"fishermanId\" : 5.637376656633329, \"quantity\" : 1.4658129805029452, \"species\" : \"species\", \"locationId\" : 5.962133916683182, \"length\" : 0.8008281904610115, \"weight\" : 6.027456183070403, \"fishSpeciesId\" : 2.3021358869347655 }, { \"fishermanId\" : 5.637376656633329, \"quantity\" : 1.4658129805029452, \"species\" : \"species\", \"locationId\" : 5.962133916683182, \"length\" : 0.8008281904610115, \"weight\" : 6.027456183070403, \"fishSpeciesId\" : 2.3021358869347655 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /catches : Submit a catch
     * Allows a fisherman to submit what they caught
     *
     * @param species The species of the fish caught (required)
     * @param length The length of the fish in inches (required)
     * @param weight The weight of the fish in pounds (required)
     * @param quantity number of fishes caught (required)
     * @param locationId location id of the place (required)
     * @param fishSpeciesId fishSpeciesId (required)
     * @param fishermanId (required)
     * @return Catch submitted successfully (status code 200)
     *         or Invalid input parameters (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "catchesPost",
        summary = "Submit a catch",
        description = "Allows a fisherman to submit what they caught",
        tags = { "Catch Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Catch submitted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input parameters"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/catches"
    )
    default ResponseEntity<String> _catchesPost(
        @NotNull @Parameter(name = "species", description = "The species of the fish caught", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "species", required = true) String species,
        @NotNull @Parameter(name = "length", description = "The length of the fish in inches", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "length", required = true) BigDecimal length,
        @NotNull @Parameter(name = "weight", description = "The weight of the fish in pounds", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "weight", required = true) BigDecimal weight,
        @NotNull @Parameter(name = "quantity", description = "number of fishes caught", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "quantity", required = true) BigDecimal quantity,
        @NotNull @Parameter(name = "locationId", description = "location id of the place", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locationId", required = true) BigDecimal locationId,
        @Parameter(name = "fishSpeciesId", description = "fishSpeciesId", required = true,in = ParameterIn.QUERY) @Valid @RequestParam(value = "fishSpeciesId", required = true) BigDecimal fishSpeciesId,
        @Parameter(name = "fishermanId", description = "fishermanId", required = true,in = ParameterIn.QUERY) @Valid @RequestParam(value = "fishermanId", required = true) BigDecimal fishermanId
    ) {
        return catchesPost(species, length, weight, quantity, locationId, fishSpeciesId,fishermanId);
    }

    // Override this method
    default  ResponseEntity<String> catchesPost(String species, BigDecimal length, BigDecimal weight, BigDecimal quantity, BigDecimal locationId, BigDecimal fishSpeciesId,BigDecimal fishermanId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
